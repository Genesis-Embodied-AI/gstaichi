name: Mac OS
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [created]
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.event_name != 'release' }}
jobs:
  build_mac_14_15:
    strategy:
      fail-fast: false
      matrix:
        MAC_OS_VERSION: [15]
        # PYTHON_VERSION: ['3.10', '3.11', '3.12', '3.13']
        PYTHON_VERSION: ['3.10']
        # include:
        #   - MAC_OS_VERSION: 14
        #     PYTHON_VERSION: '3.10'
    name: Mac OS Build
    runs-on: macos-${{ matrix.MAC_OS_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Python check
        uses: actions/setup-python@v4
        with:
          python-version: ${{ MATRIX.PYTHON_VERSION}}
      - name: Set Python CP version
        id: set_cp_version
        run: |
          pip install packaging
          cp=$(python -c "from packaging import tags; print(next(tags.sys_tags()).interpreter)")
          echo "PYTHON_CP_VERSION=${cp}"
          echo "PYTHON_CP_VERSION=${cp}" >> $GITHUB_OUTPUT
      - name: Mac OS X prerequisites
        run: |
          bash .github/workflows/scripts_new/macosx/1_prerequisites.sh
      - name: Mac OS X build
        run: |
          bash .github/workflows/scripts_new/macosx/2_build.sh
      - name: Mac OS X install
        run: |
          bash .github/workflows/scripts_new/macosx/3_install.sh
      - name: Mac OS X test
        run: |
          bash .github/workflows/scripts_new/macosx/4_test.sh
      - uses: actions/upload-artifact@v4
        with:
          name: mac_wheel_${{ matrix.MAC_OS_VERSION }}_${{ steps.set_cp_version.outputs.PYTHON_CP_VERSION }}
          path: dist/*.whl
  upload_to_storage:
    name: Mac wheel upload
    runs-on: ubuntu-22.04
    needs: build_mac_14_15
    environment: aws_storage
    strategy:
      matrix:
        MAC_OS_VERSION: [15]
        # PYTHON_CP_VERSION: [cp310, cp311, cp312, cp313]
        PYTHON_CP_VERSION: [cp310]
        # include:
        #   - MAC_OS_VERSION: 14
        #     PYTHON_CP_VERSION: cp310
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/download-artifact@v4
        with:
          name: mac_wheel_${{ matrix.MAC_OS_VERSION }}_${{ matrix.PYTHON_CP_VERSION }}
      - name: 'Upload wheel to aws s3 storage'
        run: |
          set -x
          ls -l *.whl
          mkdir -p dist
          mv *.whl dist/
          aws s3 sync dist/ s3://genesis-ai-compiler/ci/taichi/${GITHUB_SHA:0:7}/mac-${{ matrix.MAC_OS_VERSION }}-${{ matrix.PYTHON_CP_VERSION }}/
  publish_pypi:
    runs-on: ubuntu-24.04
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build_mac_14_15
    environment: publish_pypi
    permissions:
      id-token: write
      contents: read
    concurrency:
      # group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-${{ matrix.PYTHON_CP_VERSION }}-${{ matrix.PYTHON_CP_VERSION != 'cp310' && 'all' || github.sha }}-test
      group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}-${{ matrix.PYTHON_CP_VERSION }}-test
      cancel-in-progress: true
    strategy:
      matrix:
        MAC_OS_VERSION: [15]
        PYTHON_VERSION: ['3.10']
        # PYTHON_VERSION: ['3.10', '3.11', '3.12', '3.13']
        # PYTHON_CP_VERSION: [cp310, cp311, cp312, cp313]
        # PYTHON_CP_VERSION: [cp310]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Python check
        uses: actions/setup-python@v4
        with:
          python-version: ${{ MATRIX.PYTHON_VERSION}}
      - name: Set Python CP version
        id: set_cp_version
        run: |
          pip install packaging
          cp=$(python -c "from packaging import tags; print(next(tags.sys_tags()).interpreter)")
          echo "PYTHON_CP_VERSION=${cp}"
          echo "PYTHON_CP_VERSION=${cp}" >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          name: mac_wheel_${{ matrix.MAC_OS_VERSION }}_${{ steps.set_cp_version.outputs.PYTHON_CP_VERSION }}
      - name: Publish pypi
        run: |
          set -x
          pip install -U pip setuptools twine
          twine --version
          pip --version
          python -c 'import setuptools; print(setuptools.__version__)'
          twine check *.whl
          twine upload --verbose *.whl
