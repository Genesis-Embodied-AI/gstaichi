gstaichi.aot.conventions.gfxruntime140.sr
=========================================

.. py:module:: gstaichi.aot.conventions.gfxruntime140.sr

.. autoapi-nested-parse::

   Structured representation of all JSON data structures following the
   GfxRuntime140.



Classes
-------

.. autoapisummary::

   gstaichi.aot.conventions.gfxruntime140.sr.DataType
   gstaichi.aot.conventions.gfxruntime140.sr.Argument
   gstaichi.aot.conventions.gfxruntime140.sr.ArgumentScalar
   gstaichi.aot.conventions.gfxruntime140.sr.ParameterType
   gstaichi.aot.conventions.gfxruntime140.sr.NdArrayAccess
   gstaichi.aot.conventions.gfxruntime140.sr.ArgumentNdArray
   gstaichi.aot.conventions.gfxruntime140.sr.ArgumentTexture
   gstaichi.aot.conventions.gfxruntime140.sr.ArgumentRwTexture
   gstaichi.aot.conventions.gfxruntime140.sr.ReturnValue
   gstaichi.aot.conventions.gfxruntime140.sr.Context
   gstaichi.aot.conventions.gfxruntime140.sr.BufferBindingType
   gstaichi.aot.conventions.gfxruntime140.sr.BufferBinding
   gstaichi.aot.conventions.gfxruntime140.sr.TextureBindingType
   gstaichi.aot.conventions.gfxruntime140.sr.TextureBinding
   gstaichi.aot.conventions.gfxruntime140.sr.TaskType
   gstaichi.aot.conventions.gfxruntime140.sr.LaunchGrid
   gstaichi.aot.conventions.gfxruntime140.sr.Task
   gstaichi.aot.conventions.gfxruntime140.sr.Field
   gstaichi.aot.conventions.gfxruntime140.sr.Kernel
   gstaichi.aot.conventions.gfxruntime140.sr.Metadata
   gstaichi.aot.conventions.gfxruntime140.sr.NamedArgument
   gstaichi.aot.conventions.gfxruntime140.sr.Dispatch
   gstaichi.aot.conventions.gfxruntime140.sr.Graph


Functions
---------

.. autoapisummary::

   gstaichi.aot.conventions.gfxruntime140.sr.get_data_type_size
   gstaichi.aot.conventions.gfxruntime140.sr.from_dr_field
   gstaichi.aot.conventions.gfxruntime140.sr.from_dr_kernel
   gstaichi.aot.conventions.gfxruntime140.sr.from_dr_metadata
   gstaichi.aot.conventions.gfxruntime140.sr.to_dr_field
   gstaichi.aot.conventions.gfxruntime140.sr.to_dr_kernel
   gstaichi.aot.conventions.gfxruntime140.sr.to_dr_metadata
   gstaichi.aot.conventions.gfxruntime140.sr.from_dr_graph
   gstaichi.aot.conventions.gfxruntime140.sr.to_dr_graph


Module Contents
---------------

.. py:class:: DataType

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: f16
      :value: 0



   .. py:attribute:: f32
      :value: 1



   .. py:attribute:: f64
      :value: 2



   .. py:attribute:: i8
      :value: 3



   .. py:attribute:: i16
      :value: 4



   .. py:attribute:: i32
      :value: 5



   .. py:attribute:: i64
      :value: 6



   .. py:attribute:: u8
      :value: 8



   .. py:attribute:: u16
      :value: 9



   .. py:attribute:: u32
      :value: 10



   .. py:attribute:: u64
      :value: 11



.. py:function:: get_data_type_size(dtype: DataType) -> int

.. py:class:: Argument(name: Optional[str])

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: name


.. py:class:: ArgumentScalar(name: Optional[str], dtype: DataType)

   Bases: :py:obj:`Argument`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: dtype
      :type:  DataType


.. py:class:: ParameterType

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: Scalar
      :value: 0



   .. py:attribute:: Ndarray
      :value: 1



   .. py:attribute:: Texture
      :value: 2



   .. py:attribute:: RwTexture
      :value: 3



   .. py:attribute:: Unknown
      :value: 4



.. py:class:: NdArrayAccess

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: NoAccess
      :value: 0



   .. py:attribute:: Read
      :value: 1



   .. py:attribute:: Write
      :value: 2



   .. py:attribute:: ReadWrite
      :value: 3



.. py:class:: ArgumentNdArray(name: Optional[str], dtype: DataType, element_shape: List[int], ndim: int, access: NdArrayAccess)

   Bases: :py:obj:`Argument`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: dtype
      :type:  DataType


   .. py:attribute:: element_shape
      :type:  List[int]


   .. py:attribute:: ndim
      :type:  int


   .. py:attribute:: access
      :type:  NdArrayAccess


.. py:class:: ArgumentTexture(name: Optional[str], ndim: int)

   Bases: :py:obj:`Argument`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: ndim
      :type:  int


.. py:class:: ArgumentRwTexture(name: Optional[str], fmt: gstaichi.types.enums.Format, ndim: int)

   Bases: :py:obj:`Argument`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: fmt
      :type:  gstaichi.types.enums.Format


   .. py:attribute:: ndim
      :type:  int


.. py:class:: ReturnValue(dtype: DataType)

   .. py:attribute:: dtype
      :type:  DataType


.. py:class:: Context(args: List[Argument], ret: Optional[ReturnValue])

   .. py:attribute:: args
      :type:  List[Argument]


   .. py:attribute:: ret
      :type:  Optional[ReturnValue]


.. py:class:: BufferBindingType

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: Root
      :value: 0



   .. py:attribute:: GlobalTmps
      :value: 1



   .. py:attribute:: Args
      :value: 2



   .. py:attribute:: Rets
      :value: 3



   .. py:attribute:: ListGen
      :value: 4



   .. py:attribute:: ExtArr
      :value: 5



.. py:class:: BufferBinding(binding: int, iarg: int, buffer_bind_ty: BufferBindingType)

   .. py:attribute:: binding
      :type:  int


   .. py:attribute:: iarg
      :type:  int


   .. py:attribute:: buffer_bind_ty
      :type:  BufferBindingType


.. py:class:: TextureBindingType

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: Texture
      :value: 0



   .. py:attribute:: RwTexture
      :value: 1



.. py:class:: TextureBinding(binding: int, iarg: int, texture_bind_ty: TextureBindingType)

   .. py:attribute:: binding
      :type:  int


   .. py:attribute:: iarg
      :type:  int


   .. py:attribute:: texture_bind_ty
      :type:  TextureBindingType


.. py:class:: TaskType

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: Serial
      :value: 0



   .. py:attribute:: RangeFor
      :value: 1



   .. py:attribute:: StructFor
      :value: 2



   .. py:attribute:: MeshFor
      :value: 3



   .. py:attribute:: ListGen
      :value: 4



   .. py:attribute:: Gc
      :value: 5



   .. py:attribute:: GcRc
      :value: 6



.. py:class:: LaunchGrid(block_size: int, grid_size: int)

   .. py:attribute:: block_size
      :type:  int


   .. py:attribute:: grid_size
      :type:  int


.. py:class:: Task(name: str, task_ty: TaskType, buffer_binds: List[BufferBinding], texture_binds: List[TextureBinding], launch_grid: LaunchGrid)

   .. py:attribute:: name
      :type:  str


   .. py:attribute:: task_ty
      :type:  TaskType


   .. py:attribute:: buffer_binds
      :type:  List[BufferBinding]


   .. py:attribute:: texture_binds
      :type:  List[TextureBinding]


   .. py:attribute:: launch_grid
      :type:  LaunchGrid


.. py:class:: Field(name: str, dtype: DataType, element_shape: List[int], shape: List[int], offset: int)

   .. py:attribute:: name
      :type:  str


   .. py:attribute:: dtype
      :type:  DataType


   .. py:attribute:: element_shape
      :type:  List[int]


   .. py:attribute:: shape
      :type:  List[int]


   .. py:attribute:: offset
      :type:  int


.. py:class:: Kernel(name: str, context: Context, tasks: List[Task])

   .. py:attribute:: name


   .. py:attribute:: context
      :type:  Context


   .. py:attribute:: tasks
      :type:  List[Task]


.. py:class:: Metadata(fields: List[Field], kernels: List[Kernel], required_caps: List[gstaichi.types.enums.DeviceCapability], root_buffer_size: int)

   .. py:attribute:: fields
      :type:  Dict[str, Field]


   .. py:attribute:: kernels
      :type:  Dict[str, Kernel]


   .. py:attribute:: required_caps
      :type:  List[gstaichi.types.enums.DeviceCapability]


   .. py:attribute:: root_buffer_size
      :type:  int


.. py:function:: from_dr_field(d: gstaichi.aot.conventions.gfxruntime140.dr.FieldAttributes) -> Field

.. py:function:: from_dr_kernel(d: gstaichi.aot.conventions.gfxruntime140.dr.KernelAttributes) -> Kernel

.. py:function:: from_dr_metadata(d: gstaichi.aot.conventions.gfxruntime140.dr.Metadata) -> Metadata

.. py:function:: to_dr_field(f: Field) -> Dict[str, Any]

.. py:function:: to_dr_kernel(s: Kernel) -> Dict[str, Any]

.. py:function:: to_dr_metadata(s: Metadata) -> gstaichi.aot.conventions.gfxruntime140.dr.Metadata

.. py:class:: NamedArgument(name: str, arg: Argument)

   .. py:attribute:: name


   .. py:attribute:: arg


.. py:class:: Dispatch(kernel: Kernel, args: List[NamedArgument])

   .. py:attribute:: kernel


   .. py:attribute:: args


.. py:class:: Graph(name: str, dispatches: List[Dispatch])

   .. py:attribute:: name


   .. py:attribute:: dispatches


   .. py:attribute:: args
      :type:  List[NamedArgument]


.. py:function:: from_dr_graph(meta: Metadata, j: gstaichi.aot.conventions.gfxruntime140.dr.Graph) -> Graph

.. py:function:: to_dr_graph(s: Graph) -> gstaichi.aot.conventions.gfxruntime140.dr.Graph

