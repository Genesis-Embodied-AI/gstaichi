gstaichi.aot.module
===================

.. py:module:: gstaichi.aot.module


Classes
-------

.. autoapisummary::

   gstaichi.aot.module.KernelTemplate
   gstaichi.aot.module.Module


Module Contents
---------------

.. py:class:: KernelTemplate(kernel_fn, aot_module)

   .. py:method:: keygen(v, key_p, fields)
      :staticmethod:



   .. py:method:: instantiate(**kwargs)


.. py:class:: Module(arch=None, caps=None)

   An AOT module to save and load GsTaichi kernels.

   This module serializes the GsTaichi kernels for a specific arch. The
   serialized module can later be loaded to run on that backend, without the
   Python environment.

   .. rubric:: Example

   Usage::

     m = ti.aot.Module(ti.metal)
     m.add_kernel(foo)
     m.add_kernel(bar)

     m.save('/path/to/module')

     # Now the module file '/path/to/module' contains the Metal kernels
     # for running ``foo`` and ``bar``.


   .. py:method:: add_field(name, field)

      Add a gstaichi field to the AOT module.

      :param name: name of gstaichi field
      :param field: gstaichi field

      Example::

          >>> a = ti.field(ti.f32, shape=(4,4))
          >>> b = ti.field("something")
          >>>
          >>> m.add_field(a)
          >>> m.add_field(b)
          >>>
          >>> # Must add in sequence



   .. py:method:: add_kernel(kernel_fn, template_args=None, name=None)

      Add a gstaichi kernel to the AOT module.

      :param kernel_fn: the function decorated by gstaichi `kernel`.
      :type kernel_fn: Function
      :param template_args: a dict where key is the template
                            parameter name, and value is the instantiating arg. Note that this
                            works for both :class:`~gstaichi.types.template` and for
                            `:class:`~gstaichi.types.ndarray`.
      :type template_args: Dict[str, Any]
      :param name: Name to identify this kernel in the module. If not
                   provided, uses the built-in ``__name__`` attribute of `kernel_fn`.
      :type name: str



   .. py:method:: add_graph(name, graph)


   .. py:method:: add_kernel_template(kernel_fn)

      Add a gstaichi kernel (with template parameters) to the AOT module.

      :param kernel_fn: the function decorated by gstaichi `kernel`.
      :type kernel_fn: Function

      Example::

          >>> @ti.kernel
          >>> def bar_tmpl(a: ti.template()):
          >>>   x = a
          >>>   # or y = a
          >>>   # do something with `x` or `y`
          >>>
          >>> m = ti.aot.Module(arch)
          >>> with m.add_kernel_template(bar_tmpl) as kt:
          >>>   kt.instantiate(a=x)
          >>>   kt.instantiate(a=y)
          >>>
          >>> @ti.kernel
          >>> def bar_tmpl_multiple_args(a: ti.template(), b: ti.template())
          >>>   x = a
          >>>   y = b
          >>>   # do something with `x` and `y`
          >>>
          >>> with m.add_kernel_template(bar_tmpl) as kt:
          >>>   kt.instantiate(a=x, b=y)

      .. todo:: * Support external array



   .. py:method:: save(filepath)

      :param filepath: path to a folder to store aot files.
      :type filepath: str



   .. py:method:: archive(filepath: str)

      :param filepath: path to the stored archive of aot artifacts, MUST
                       end with `.tcm`.
      :type filepath: str



