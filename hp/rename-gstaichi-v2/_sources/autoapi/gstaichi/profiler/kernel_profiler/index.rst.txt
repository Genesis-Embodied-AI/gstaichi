gstaichi.profiler.kernel_profiler
=================================

.. py:module:: gstaichi.profiler.kernel_profiler


Functions
---------

.. autoapisummary::

   gstaichi.profiler.kernel_profiler.print_kernel_profiler_info
   gstaichi.profiler.kernel_profiler.query_kernel_profiler_info
   gstaichi.profiler.kernel_profiler.clear_kernel_profiler_info
   gstaichi.profiler.kernel_profiler.get_kernel_profiler_total_time
   gstaichi.profiler.kernel_profiler.set_kernel_profiler_toolkit
   gstaichi.profiler.kernel_profiler.set_kernel_profiler_metrics
   gstaichi.profiler.kernel_profiler.collect_kernel_profiler_metrics


Module Contents
---------------

.. py:function:: print_kernel_profiler_info(mode='count')

   Print the profiling results of GsTaichi kernels.

   To enable this profiler, set ``kernel_profiler=True`` in ``ti.init()``.
   ``'count'`` mode: print the statistics (min,max,avg time) of launched kernels,
   ``'trace'`` mode: print the records of launched kernels with specific profiling metrics (time, memory load/store and core utilization etc.),
   and defaults to ``'count'``.

   :param mode: the way to print profiling results.
   :type mode: str

   Example::

       >>> import gstaichi as ti

       >>> ti.init(ti.cpu, kernel_profiler=True)
       >>> var = ti.field(ti.f32, shape=1)

       >>> @ti.kernel
       >>> def compute():
       >>>     var[0] = 1.0

       >>> compute()
       >>> ti.profiler.print_kernel_profiler_info()
       >>> # equivalent calls :
       >>> # ti.profiler.print_kernel_profiler_info('count')

       >>> ti.profiler.print_kernel_profiler_info('trace')

   .. note:: For advanced mode of `KernelProfiler`, please visit https://docs.taichi-lang.org/docs/profiler#advanced-mode.


.. py:function:: query_kernel_profiler_info(name)

   Query kernel elapsed time(min,avg,max) on devices using the kernel name.

   To enable this profiler, set `kernel_profiler=True` in `ti.init`.

   :param name: kernel name.
   :type name: str

   :returns: with member variables(counter, min, max, avg)
   :rtype: KernelProfilerQueryResult (class)

   Example::

       >>> import gstaichi as ti

       >>> ti.init(ti.cpu, kernel_profiler=True)
       >>> n = 1024*1024
       >>> var = ti.field(ti.f32, shape=n)

       >>> @ti.kernel
       >>> def fill():
       >>>     for i in range(n):
       >>>         var[i] = 0.1

       >>> fill()
       >>> ti.profiler.clear_kernel_profiler_info() #[1]
       >>> for i in range(100):
       >>>     fill()
       >>> query_result = ti.profiler.query_kernel_profiler_info(fill.__name__) #[2]
       >>> print("kernel executed times =",query_result.counter)
       >>> print("kernel elapsed time(min_in_ms) =",query_result.min)
       >>> print("kernel elapsed time(max_in_ms) =",query_result.max)
       >>> print("kernel elapsed time(avg_in_ms) =",query_result.avg)

   .. note::

      [1] To get the correct result, query_kernel_profiler_info() must be used in conjunction with
      clear_kernel_profiler_info().


.. py:function:: clear_kernel_profiler_info()

   Clear all KernelProfiler records.


.. py:function:: get_kernel_profiler_total_time()

   Get elapsed time of all kernels recorded in KernelProfiler.

   :returns: total time in second.
   :rtype: time (float)


.. py:function:: set_kernel_profiler_toolkit(toolkit_name='default')

   Set the toolkit used by KernelProfiler.

   Currently, we only support toolkits: ``'default'`` and ``'cupti'``.

   :param toolkit_name: string of toolkit name.
   :type toolkit_name: str

   :returns: whether the setting is successful or not.
   :rtype: status (bool)

   Example::

       >>> import gstaichi as ti

       >>> ti.init(arch=ti.cuda, kernel_profiler=True)
       >>> x = ti.field(ti.f32, shape=1024*1024)

       >>> @ti.kernel
       >>> def fill():
       >>>     for i in x:
       >>>         x[i] = i

       >>> ti.profiler.set_kernel_profiler_toolkit('cupti')
       >>> for i in range(100):
       >>>     fill()
       >>> ti.profiler.print_kernel_profiler_info()

       >>> ti.profiler.set_kernel_profiler_toolkit('default')
       >>> for i in range(100):
       >>>     fill()
       >>> ti.profiler.print_kernel_profiler_info()


.. py:function:: set_kernel_profiler_metrics(metric_list=default_cupti_metrics)

   Set metrics that will be collected by the CUPTI toolkit.

   :param metric_list: a list of :class:`~gstaichi.profiler.CuptiMetric()` instances, default value: :data:`~gstaichi.profiler.kernel_metrics.default_cupti_metrics`.
   :type metric_list: list

   Example::

       >>> import gstaichi as ti

       >>> ti.init(kernel_profiler=True, arch=ti.cuda)
       >>> ti.profiler.set_kernel_profiler_toolkit('cupti')
       >>> num_elements = 128*1024*1024

       >>> x = ti.field(ti.f32, shape=num_elements)
       >>> y = ti.field(ti.f32, shape=())
       >>> y[None] = 0

       >>> @ti.kernel
       >>> def reduction():
       >>>     for i in x:
       >>>         y[None] += x[i]

       >>> # In the case of not parameter, GsTaichi will print its pre-defined metrics list
       >>> ti.profiler.get_predefined_cupti_metrics()
       >>> # get GsTaichi pre-defined metrics
       >>> profiling_metrics = ti.profiler.get_predefined_cupti_metrics('shared_access')

       >>> global_op_atom = ti.profiler.CuptiMetric(
       >>>     name='l1tex__t_set_accesses_pipe_lsu_mem_global_op_atom.sum',
       >>>     header=' global.atom ',
       >>>     format='    {:8.0f} ')
       >>> # add user defined metrics
       >>> profiling_metrics += [global_op_atom]

       >>> # metrics setting will be retained until the next configuration
       >>> ti.profiler.set_kernel_profiler_metrics(profiling_metrics)
       >>> for i in range(16):
       >>>     reduction()
       >>> ti.profiler.print_kernel_profiler_info('trace')

   .. note:: Metrics setting will be retained until the next configuration.


.. py:function:: collect_kernel_profiler_metrics(metric_list=default_cupti_metrics)

   Set temporary metrics that will be collected by the CUPTI toolkit within this context.

   :param metric_list: a list of :class:`~gstaichi.profiler.CuptiMetric()` instances, default value: :data:`~gstaichi.profiler.kernel_metrics.default_cupti_metrics`.
   :type metric_list: list

   Example::

       >>> import gstaichi as ti

       >>> ti.init(kernel_profiler=True, arch=ti.cuda)
       >>> ti.profiler.set_kernel_profiler_toolkit('cupti')
       >>> num_elements = 128*1024*1024

       >>> x = ti.field(ti.f32, shape=num_elements)
       >>> y = ti.field(ti.f32, shape=())
       >>> y[None] = 0

       >>> @ti.kernel
       >>> def reduction():
       >>>     for i in x:
       >>>         y[None] += x[i]

       >>> # In the case of not parameter, GsTaichi will print its pre-defined metrics list
       >>> ti.profiler.get_predefined_cupti_metrics()
       >>> # get GsTaichi pre-defined metrics
       >>> profiling_metrics = ti.profiler.get_predefined_cupti_metrics('device_utilization')

       >>> global_op_atom = ti.profiler.CuptiMetric(
       >>>     name='l1tex__t_set_accesses_pipe_lsu_mem_global_op_atom.sum',
       >>>     header=' global.atom ',
       >>>     format='    {:8.0f} ')
       >>> # add user defined metrics
       >>> profiling_metrics += [global_op_atom]

       >>> # metrics setting is temporary, and will be clear when exit from this context.
       >>> with ti.profiler.collect_kernel_profiler_metrics(profiling_metrics):
       >>>     for i in range(16):
       >>>         reduction()
       >>>     ti.profiler.print_kernel_profiler_info('trace')

   .. note:: The configuration of the ``metric_list`` will be clear when exit from this context.


