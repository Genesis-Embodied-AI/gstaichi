taichi.lang.ast.ast_transformer_utils
=====================================

.. py:module:: taichi.lang.ast.ast_transformer_utils


Classes
-------

.. autoapisummary::

   taichi.lang.ast.ast_transformer_utils.Builder
   taichi.lang.ast.ast_transformer_utils.VariableScopeGuard
   taichi.lang.ast.ast_transformer_utils.StaticScopeStatus
   taichi.lang.ast.ast_transformer_utils.StaticScopeGuard
   taichi.lang.ast.ast_transformer_utils.NonStaticControlFlowStatus
   taichi.lang.ast.ast_transformer_utils.NonStaticControlFlowGuard
   taichi.lang.ast.ast_transformer_utils.LoopStatus
   taichi.lang.ast.ast_transformer_utils.LoopScopeAttribute
   taichi.lang.ast.ast_transformer_utils.LoopScopeGuard
   taichi.lang.ast.ast_transformer_utils.NonStaticIfGuard
   taichi.lang.ast.ast_transformer_utils.ReturnStatus
   taichi.lang.ast.ast_transformer_utils.ASTTransformerContext


Module Contents
---------------

.. py:class:: Builder

.. py:class:: VariableScopeGuard(scopes)

   .. py:attribute:: scopes


.. py:class:: StaticScopeStatus

   .. py:attribute:: is_in_static_scope
      :value: False



.. py:class:: StaticScopeGuard(status)

   .. py:attribute:: status


.. py:class:: NonStaticControlFlowStatus

   .. py:attribute:: is_in_non_static_control_flow
      :value: False



.. py:class:: NonStaticControlFlowGuard(status: NonStaticControlFlowStatus)

   .. py:attribute:: status


.. py:class:: LoopStatus

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: Normal
      :value: 0



   .. py:attribute:: Break
      :value: 1



   .. py:attribute:: Continue
      :value: 2



.. py:class:: LoopScopeAttribute(is_static)

   .. py:attribute:: is_static


   .. py:attribute:: status


   .. py:attribute:: nearest_non_static_if
      :type:  ast.If | None
      :value: None



.. py:class:: LoopScopeGuard(scopes, non_static_guard=None)

   .. py:attribute:: scopes


   .. py:attribute:: non_static_guard
      :value: None



.. py:class:: NonStaticIfGuard(if_node: ast.If, loop_attribute: LoopScopeAttribute, non_static_status: NonStaticControlFlowStatus)

   .. py:attribute:: loop_attribute


   .. py:attribute:: if_node


   .. py:attribute:: non_static_guard


.. py:class:: ReturnStatus

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: NoReturn
      :value: 0



   .. py:attribute:: ReturnedVoid
      :value: 1



   .. py:attribute:: ReturnedValue
      :value: 2



.. py:class:: ASTTransformerContext(excluded_parameters=(), is_kernel: bool = True, func=None, arg_features=None, global_vars=None, argument_data=None, file=None, src=None, start_lineno: int | None = None, ast_builder=None, is_real_function: bool = False)

   .. py:attribute:: func
      :value: None



   .. py:attribute:: local_scopes
      :value: []



   .. py:attribute:: loop_scopes
      :type:  List[LoopScopeAttribute]
      :value: []



   .. py:attribute:: excluded_parameters
      :value: ()



   .. py:attribute:: is_kernel
      :value: True



   .. py:attribute:: arg_features
      :value: None



   .. py:attribute:: returns
      :value: None



   .. py:attribute:: global_vars
      :value: None



   .. py:attribute:: argument_data
      :value: None



   .. py:attribute:: return_data
      :value: None



   .. py:attribute:: file
      :value: None



   .. py:attribute:: src
      :value: None



   .. py:attribute:: indent
      :value: 0



   .. py:attribute:: lineno_offset


   .. py:attribute:: raised
      :value: False



   .. py:attribute:: non_static_control_flow_status


   .. py:attribute:: static_scope_status


   .. py:attribute:: returned


   .. py:attribute:: ast_builder
      :value: None



   .. py:attribute:: visited_funcdef
      :value: False



   .. py:attribute:: is_real_function
      :value: False



   .. py:attribute:: kernel_args
      :value: []



   .. py:method:: variable_scope_guard()


   .. py:method:: loop_scope_guard(is_static=False)


   .. py:method:: non_static_if_guard(if_node: ast.If)


   .. py:method:: non_static_control_flow_guard()


   .. py:method:: static_scope_guard()


   .. py:method:: current_scope()


   .. py:method:: current_loop_scope()


   .. py:method:: loop_status()


   .. py:method:: set_loop_status(status)


   .. py:method:: is_in_static_for()


   .. py:method:: is_in_non_static_control_flow()


   .. py:method:: is_in_static_scope()


   .. py:method:: is_var_declared(name)


   .. py:method:: create_variable(name, var)


   .. py:method:: check_loop_var(loop_var)


   .. py:method:: get_var_by_name(name)


   .. py:method:: get_pos_info(node)


