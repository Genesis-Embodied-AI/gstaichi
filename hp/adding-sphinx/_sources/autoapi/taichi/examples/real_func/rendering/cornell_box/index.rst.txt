taichi.examples.real_func.rendering.cornell_box
===============================================

.. py:module:: taichi.examples.real_func.rendering.cornell_box


Attributes
----------

.. autoapisummary::

   taichi.examples.real_func.rendering.cornell_box.image_resolution
   taichi.examples.real_func.rendering.cornell_box.image_buffer
   taichi.examples.real_func.rendering.cornell_box.image_pixels
   taichi.examples.real_func.rendering.cornell_box.Ray
   taichi.examples.real_func.rendering.cornell_box.Material
   taichi.examples.real_func.rendering.cornell_box.Transform
   taichi.examples.real_func.rendering.cornell_box.SDFObject
   taichi.examples.real_func.rendering.cornell_box.objects


Functions
---------

.. autoapisummary::

   taichi.examples.real_func.rendering.cornell_box.rotate
   taichi.examples.real_func.rendering.cornell_box.signed_distance
   taichi.examples.real_func.rendering.cornell_box.nearest_object
   taichi.examples.real_func.rendering.cornell_box.calc_normal
   taichi.examples.real_func.rendering.cornell_box.raycast
   taichi.examples.real_func.rendering.cornell_box.hemispheric_sampling
   taichi.examples.real_func.rendering.cornell_box.raytrace
   taichi.examples.real_func.rendering.cornell_box.build_scene
   taichi.examples.real_func.rendering.cornell_box.render
   taichi.examples.real_func.rendering.cornell_box.main


Module Contents
---------------

.. py:data:: image_resolution
   :value: (512, 512)


.. py:data:: image_buffer

.. py:data:: image_pixels

.. py:data:: Ray

.. py:data:: Material

.. py:data:: Transform

.. py:data:: SDFObject

.. py:data:: objects

.. py:function:: rotate(a: taichi.math.vec3) -> taichi.math.mat3

.. py:function:: signed_distance(obj: SDFObject, pos: taichi.math.vec3) -> float

.. py:function:: nearest_object(p: taichi.math.vec3) -> (int, float)

.. py:function:: calc_normal(obj: SDFObject, p: taichi.math.vec3) -> taichi.math.vec3

.. py:function:: raycast(ray: Ray) -> (SDFObject, taichi.math.vec3, bool)

.. py:function:: hemispheric_sampling(normal: taichi.math.vec3) -> taichi.math.vec3

.. py:function:: raytrace(ray: Ray) -> Ray

.. py:function:: build_scene()

.. py:function:: render(camera_position: taichi.math.vec3, camera_lookat: taichi.math.vec3, camera_up: taichi.math.vec3)

.. py:function:: main()

