gstaichi.lang.argpack
=====================

.. py:module:: gstaichi.lang.argpack


Classes
-------

.. autoapisummary::

   gstaichi.lang.argpack.ArgPack


Module Contents
---------------

.. py:class:: ArgPack(annotations, dtype, *args, **kwargs)

   The `ArgPack` Type Class.

   The `ArgPack` operates as a dictionary-like data pack, storing members as (key, value) pairs. Members stored can
   range from scalars and matrices to other dictionary-like structures. Distinguished from structs, `ArgPack` can
   accommodate buffer types such as `NdarrayType` and `TextureType` from GsTaichi. However, unlike `ti.Struct` which
   serves as a data container, `ArgPack` functions as a reference container. It's important to note that `ArgPack`
   cannot be nested within other types except for another `ArgPack`, and can only be utilized as kernel parameters.

   :param annotations: The keys and types for `ArgPack` members.
   :type annotations: Dict[str, Union[Dict, Matrix, Struct]]
   :param dtype: The ArgPackType class of this ArgPack object.
   :type dtype: ArgPackType
   :param entries: The keys and corresponding values for `ArgPack` members.
   :type entries: Dict[str, Union[Dict, Matrix, Struct]]

   :returns: An instance of this `ArgPack`.

   Example::

       >>> vec3 = ti.types.vector(3, ti.f32)
       >>> pack_type = ti.ArgPackType(v=vec3, t=ti.f32)
       >>> a = pack_type(v=vec3([0, 0, 0]), t=1.0)
       >>> print(a.items)
       dict_items([('v', [0. 0. 0.]), ('t', 1.0)])


   .. py:property:: keys

      Returns the list of member names in string format.

      Example::

         >>> vec3 = ti.types.vector(3, ti.f32)
         >>> sphere_pack = ti.ArgPackType(center=vec3, radius=ti.f32)
         >>> sphere = sphere_pack(center=vec3([0, 0, 0]), radius=1.0)
         >>> sphere.keys
         ['center', 'radius']


   .. py:property:: items

      Returns the items in this argument pack.

      Example::

         >>> vec3 = ti.types.vector(3, ti.f32)
         >>> sphere_pack = ti.ArgPackType(center=vec3, radius=ti.f32)
         >>> sphere = sphere_pack(center=vec3([0, 0, 0]), radius=1.0)
         >>> sphere.items
          dict_items([('center', 2), ('radius', 1.0)])


   .. py:method:: to_dict()

      Converts the ArgPack to a dictionary.

      :returns: The result dictionary.
      :rtype: Dict



